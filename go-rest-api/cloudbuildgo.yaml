steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/go-rest-api:latest', '.']
    waitFor: ['-']

  # Step 2: Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    args: ['push', 'gcr.io/$PROJECT_ID/go-rest-api:latest']
    waitFor: ['Build']

  # Step 3: Download and install Terraform
  - name: 'hashicorp/terraform:1.5.3'
    id: 'Install Terraform'
    entrypoint: 'sh'
    args: ['-c', 'terraform version']

  # Step 4: Initialize Terraform
  - name: 'hashicorp/terraform:1.5.3'
    id: 'Terraform Init'
    entrypoint: 'sh'
    args: ['-c', 'terraform init -backend-config="bucket=$TF_STATE_BUCKET"']
    dir: './'  # Directory where your Terraform files are located
    waitFor: ['Install Terraform']

  # Step 5: Plan the Terraform deployment
  - name: 'hashicorp/terraform:1.5.3'
    id: 'Terraform Plan'
    entrypoint: 'sh'
    args: ['-c', 'terraform plan -out=tfplan']
    dir: './'  # Directory where your Terraform files are located
    waitFor: ['Terraform Init']

  # Step 6: Apply the Terraform configuration
  - name: 'hashicorp/terraform:1.5.3'
    id: 'Terraform Apply'
    entrypoint: 'sh'
    args: ['-c', 'terraform apply -auto-approve tfplan']
    dir: './'  # Directory where your Terraform files are located
    waitFor: ['Terraform Plan']

  # Step 7: Deploy to Kubernetes using kubectl
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy'
    args: ['apply', '-f', 'k8s/deployment.yaml']
    waitFor: ['Terraform Apply']

  # Step 8: Apply the Kubernetes service configuration
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy Service'
    args: ['apply', '-f', 'k8s/service.yaml']
    waitFor: ['Deploy']

timeout: '1200s'

options:
  logging: CLOUD_LOGGING_ONLY

# Define substitutions for Terraform backend configuration
substitutions:
  _TF_STATE_BUCKET: 'your-terraform-state-bucket-name'  # Replace with your GCS bucket for Terraform state
